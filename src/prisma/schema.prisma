// file: src/prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../../dist/generated/client"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x", "darwin-arm64", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  FREE
  PREMIUM
}

enum SubscriptionFrequency {
  MONTHLY
  YEARLY
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ConcentrationExercise {
  PODS
  PATTERNS
  BREATHING
}

enum Profession {
  LYCEEN
  ETUDIANT
  ENTREPRENEUR
  CHERCHEUR
  MANAGER
  SALARIE
  AUTRE
}

enum NotificationType {
  AUTO_SUGGESTIONS
  MESSAGE
  MAIL
  FLASH
}

enum ExerciseFrequency {
  ONE_PER_SESSION
  AFTER_EACH_BREAK
}

enum AgeRange {
  UNDER_18
  AGE_18_24
  AGE_25_34
  AGE_35_44
  AGE_45_54
  AGE_55_64
  OVER_64
}

enum TimeSessionType {
  WORK
  BREAK
}

model User {
  id                 String             @id @default(uuid())
  firstname          String
  lastname           String
  pseudo             String             @unique
  email              String             @unique
  emailVerified      Boolean            @default(false)
  phoneNumber        String?
  password           String
  createdAt          DateTime           @default(now())
  lastLogin          DateTime?
  subscriptionStatus SubscriptionStatus @default(FREE)
  stripeCustomerId   String?            @unique
  subscriptionID     String?

  defaultWorkTime   Json?
  defaultBreakTime  Json?
  exerciseFrequency String?
  emergencyCode     String   @default("0000")
  ageRange          AgeRange
  isActive          Boolean  @default(true)

  profession Profession

  timeSessions    TimeSession[]
  exerciseResults ConcentrationExerciseResult[]
  subscriptions   Subscription[]
  rodPics         RodPic[]

  friends  Friend[] @relation("InitiatedFriendships")
  friendOf Friend[] @relation("ReceivedFriendships")
}

model TimeSession {
  id        String          @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  type      TimeSessionType

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ConcentrationExerciseResult {
  id        String                @id @default(uuid())
  type      ConcentrationExercise
  score     Int
  createdAt DateTime              @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Subscription {
  id        String                @id @default(uuid())
  startDate DateTime
  endDate   DateTime?
  status    SubscriptionStatus
  frequency SubscriptionFrequency
  updatedAt DateTime?             @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model RodPic {
  id        String   @id @default(uuid())
  content   Json     // nouveau champ JSON
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Friend {
  id        String       @id @default(uuid())
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt

  user   User   @relation(fields: [userId], references: [id], name: "InitiatedFriendships")
  userId String

  friend   User   @relation(fields: [friendId], references: [id], name: "ReceivedFriendships")
  friendId String
}
