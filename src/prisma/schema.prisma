generator client {
  provider      = "prisma-client-js"
  //engineType    = "binary"
  output        = "../../dist/generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x", "darwin-arm64", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://rodin:rodin123@localhost:5432/rodin?schema=public"

//  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  FREE
  PREMIUM
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ConcentrationExercise {
  PODS
  PATTERNS
  BREATHING
}

enum Profession {
  LYCEEN
  ETUDIANT
  ENTREPRENEUR
  CHERCHEUR
  MANAGER
  SALARIE
  AUTRE
}

enum NotificationType {
  AUTO_SUGGESTIONS
  MESSAGE
  MAIL
  FLASH
}

enum ExerciseFrequency {
  ONE_PER_SESSION
  AFTER_EACH_BREAK
}

enum AgeRange {
  UNDER_18
  AGE_18_24
  AGE_25_34
  AGE_35_44
  AGE_45_54
  AGE_55_64
  OVER_64
}

model User {
  id                 String             @id @default(uuid())
  pseudo             String             @unique
  email              String             @unique
  emailVerified      Boolean            @default(false)
  phoneNumber        String?
  passwordHash       String
  createdAt          DateTime           @default(now())
  lastLogin          DateTime?
  subscriptionStatus SubscriptionStatus @default(FREE)
  stripeCustomerId String?  @unique
  subscriptionID   String?


  defaultWorkTime   String?
  defaultBreakTime  String?
  exerciseFrequency String?
  emergencyCode     String  @default("0000") // EXAMPLE: Provide a default string
  ageRange          AgeRange

  profession        Profession

  workSessions    WorkSession[]
  exerciseResults ExerciseResult[]
  challenges      Challenge[]
  subscriptions   Subscription[]
  statistics      Statistics?
  rodPics         RodPic[]
  leaderboard     Leaderboard?

  friends  Friend[] @relation("InitiatedFriendships")
  friendOf Friend[] @relation("ReceivedFriendships")
}

model WorkSession {
  id            String   @id @default(uuid())
  startTime     DateTime
  endTime       DateTime
  workDuration  Int
  breakDuration Int
  notes         String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model CognitiveExercise {
  id          String                @id @default(uuid())
  name        String
  description String
  duration    Int
  type        ConcentrationExercise
  createdAt   DateTime              @default(now())

  ReactivityTest    ReactivityTest?
  MemoryExercise    MemoryExercise?
  BreathingExercise BreathingExercise?
  results           ExerciseResult[]
}

model ReactivityTest {
  id               String @id @default(uuid())
  targetColor      String
  distractionColor String
  maxTargets       Int

  exercise   CognitiveExercise @relation(fields: [exerciseId], references: [id])
  exerciseId String            @unique
}

model MemoryExercise {
  id               String @id @default(uuid())
  patternLength    Int
  reproductionTime Int

  exercise   CognitiveExercise @relation(fields: [exerciseId], references: [id])
  exerciseId String            @unique
}

model BreathingExercise {
  id             String @id @default(uuid())
  inhaleDuration Int
  exhaleDuration Int
  holdDuration   Int?

  exercise   CognitiveExercise @relation(fields: [exerciseId], references: [id])
  exerciseId String            @unique
}

model ExerciseResult {
  id    String   @id @default(uuid())
  score Int
  date  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  exercise   CognitiveExercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
}

model Challenge {
  id          String @id @default(uuid())
  name        String
  description String
  goal        Int

  reward   Reward @relation(fields: [rewardId], references: [id])
  rewardId String

  users User[]
}

model Reward {
  id             String      @id @default(uuid())
  name           String
  description    String
  pointsRequired Int
  challenges     Challenge[]
}

model Subscription {
  id        String             @id @default(uuid())
  startDate DateTime
  endDate   DateTime?
  status    SubscriptionStatus @default(FREE)

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Statistics {
  id                String   @id @default(uuid())
  totalWorkTime     Int
  totalExerciseTime Int
  averageScore      Float
  lastUpdated       DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model RodPic {
  id        String   @id @default(uuid())
  imageUrl  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Leaderboard {
  id          String   @id @default(uuid())
  totalPoints Int
  rank        Int
  lastUpdated DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Friend {
  id        String       @id @default(uuid())
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())

  user   User   @relation(fields: [userId], references: [id], name: "InitiatedFriendships")
  userId String

  friend   User   @relation(fields: [friendId], references: [id], name: "ReceivedFriendships")
  friendId String
}
